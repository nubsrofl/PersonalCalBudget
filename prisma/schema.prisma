generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  passwordHash String?
  householdId  String?
  role         Role      @default(ADULT)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  household    Household? @relation(fields: [householdId], references: [id])
  debts        Debt[]
  sessions     Session[]
  accounts     Account[]
}

model Household {
  id        String  @id @default(cuid())
  name      String
  users     User[]
  bills     Bill[]
  debts     Debt[]
  calendars CalendarSource[]
  paychecks PaycheckTemplate[]
  transactions BankTransaction[]
  incomeSources IncomeSource[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  accessToken        String?
  refreshToken       String?
  scope              String?
  expiresAt          Int?
  tokenType          String?
  idToken            String?
  sessionState       String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@id([identifier, token])
}

model CalendarSource {
  id           String   @id @default(cuid())
  householdId  String
  provider     String
  externalId   String?
  color        String?
  isReadOnly   Boolean  @default(false)
  syncCursor   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  household    Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  events       EventShadow[]
  @@unique([householdId, provider])
}

model EventShadow {
  id               String   @id @default(cuid())
  calendarSourceId String
  externalEventId  String?
  title            String
  startsAt         DateTime
  endsAt           DateTime
  allDay           Boolean  @default(false)
  calendar         CalendarSource @relation(fields: [calendarSourceId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Bill {
  id           String   @id @default(cuid())
  householdId  String
  name         String
  amount       Decimal  @db.Decimal(12,2)
  dueDay       Int?
  dueDate      DateTime?
  recurrence   String
  category     String?
  autopay      Boolean  @default(false)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  household    Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
}

model Debt {
  id           String   @id @default(cuid())
  householdId  String
  ownerId      String?
  name         String
  type         String
  apr          Decimal  @db.Decimal(7,4)
  balance      Decimal  @db.Decimal(12,2)
  minType      String
  minValue     Decimal  @db.Decimal(12,4)
  dueDay       Int
  compounding  String   @default("monthly")
  externalRef  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  household    Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  owner        User?     @relation(fields: [ownerId], references: [id])
  projections  PaymentProjection[]
}

model PaymentProjection {
  id          String   @id @default(cuid())
  debtId      String
  month       DateTime
  interest    Decimal  @db.Decimal(12,2)
  minPayment  Decimal  @db.Decimal(12,2)
  endBalance  Decimal  @db.Decimal(12,2)
  createdAt   DateTime @default(now())
  debt        Debt     @relation(fields: [debtId], references: [id], onDelete: Cascade)
}

model PaycheckTemplate {
  id           String   @id @default(cuid())
  householdId  String
  name         String
  amount       Decimal  @db.Decimal(12,2)
  cadence      String
  daySpecifier String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  household    Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
}

model BankTransaction {
  id            String   @id @default(cuid())
  householdId   String
  postedAt      DateTime
  amount        Decimal  @db.Decimal(12,2) // positive = inflow, negative = outflow
  name          String
  merchantName  String?
  category      String?
  accountId     String
  plaidTxId     String   @unique
  type          String?
  linkedDebtId  String?
  createdAt     DateTime @default(now())
  household     Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
}

model IncomeSource {
  id            String   @id @default(cuid())
  householdId   String
  name          String
  anchorDate    DateTime?
  cadence       String
  amount        Decimal   @db.Decimal(12,2)
  createdAt     DateTime  @default(now())
  household     Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  @@unique([householdId, name])
}

enum Role { OWNER ADULT TEEN }
